# This input file is a disorganized mess of notes with no purpose but was used while exploring input files, disregard
---
# metadata for the simulation
environment:
  title: _example_simulation # the simulation title and default output directory for results
  tagDirectory: false # if true, ablate will append the simulation start time to the output directory
  # directory: path/to/directory # optional directory argument, default is a new directory named for the title


# global arguments that can be used by petsc
arguments:



# timestepper used to march in time.  The domain, fields, and other arguments must be specified
timestepper:
  name: theMainTimeStepper
  # time stepper specific input arguments
  io:
    !ablate::io::Hdf5MultiFileSerializer
    interval: 1 # After how many time steps should data be outputted to hdf5 (0 or 1 for all time steps)
  arguments:
    ts_type: rk # rk for Runge-Kutta
    ts_max_steps: # max number of time steps
    ts_max_time: 1
    ts_dt: 1.0e-10 # size of time steps
    ts_adapt_type: none # _________________
    ts_adapt_monitor: "" # _________________
    ts_adapt_safety: 0.8 # _________________
  # the domain/mesh must be specified at the start of a simulation
  domain: !ablate::domain::BoxMesh # This is a simple uniform box mesh
    name: simpleBoxField # (string) the name of the domain/mesh object
    faces: [ 12, 12 ] # (int list) the number of faces in each direction
    lower: [ 0, 0 ] # (double list) the lower bound of the mesh
    upper: [ 1, 1 ] # (double list) the upper bound of the mesh
    boundary: [ "PERIODIC", "NONE" ] # (string list) custom boundary types (NONE, GHOSTED, MIRROR, PERIODIC)
    simplex: false # (bool) sets if the elements/cells are simplex
    modifiers: # # specify any modifications to be performed to the mesh/domain (ablate::domain::modifiers::Modifier list)
      - !ablate::domain::modifiers::SetFromOptions
        dm_refine: 0
      - !ablate::domain::modifiers::DistributeWithGhostCells # if using mpi, this modifier distributes cells
      - !ablate::domain::modifiers::GhostBoundaryCells # if using a FVM ghost boundary cells must be added
    fields:
      # all fields must be defined before solvers.  The ablate::finiteVolume::CompressibleFlowFields is a helper
      # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
      - !ablate::finiteVolume::CompressibleFlowFields
        # the !ablate::finiteVolume::CompressibleFlowFields needs the eos to determine if there are any species
        eos: !ablate::eos::PerfectGas &eos # (ablate::eos::EOS) has list of all equations of state, this one is for a perfect gas
           # the & anchors the eos so that it can be reused
          parameters: # parameters can be found in eos formulation on ablate dev site
            gamma: 1.4
            Rgas: 287.0
          # species: (string list) species to track. Note: species mass fractions do not change eos

  # set the initial conditions of the flow field
  initialization:
    - !ablate::finiteVolume::fieldFunctions::Euler
      state: &flowFieldState # (ablate::finiteVolume::fieldFunctions::CompressibleFlowState) The CompressibleFlowState used to initialize
        # the & anchors the flowFieldState so that it can be reused
        eos: *eos # pointer to eos
        temperature: !ablate::mathFunctions::geom::Sphere # creating a hot sphere for flow
          center: [ .036,  0.05, 0.05 ]
          radius: 0.025
          insideValues: [ 1500 ] # defining inside temperature in kelvin
          outsideValues: [ 298.15 ] # defining outside temperature in kelvin
        pressure: 101325.0 # pressure of sphere
        velocity: "0, 0" # initial velocity
        massFractions: !ablate::finiteVolume::fieldFunctions::MassFractions # (ablate::mathFunctions::FieldFunction) a fieldFunctions used to describe all mass fractions
          &airMassFrac # the & anchors the flowFieldState so that it can be reused in the solver
          eos: *eos # pointer to eos
          values: # define mass fractions here, below is example for air
            - fieldName: O2
              field: 0.22968530497578818
            - fieldName: N2
              field: 0.7703146950242119
    - !ablate::finiteVolume::fieldFunctions::DensityMassFractions
      state: *flowFieldState
    - !ablate::finiteVolume::fieldFunctions::Euler
      # slab Burner
      region: # (ablate::domain::Region) A subset of the domain to apply the field function
        name: slabBurnerBoundaryCells
      state: &fuelFieldState
        eos: *eos
        temperature: 653.0
        pressure: 101325
        velocity: "0.0, 0.0, 0.0"
        massFractions: !ablate::finiteVolume::fieldFunctions::MassFractions
          &fuelMassFrac
          eos: *eos
          values:
            - fieldName: H2
              field: 3.11573908295E-07
            - fieldName: CH4
              field: 1.37640311576E-01
            - fieldName: CO
              field: 5.59511130432E-01
            - fieldName: CO2
              field: 2.67621505110E-05
            - fieldName: C2H2
              field: 8.12221908950E-04
            - fieldName: C2H4
              field: 8.12221908950E-04
            - fieldName: C2H6
              field: 2.61085823724E-02
            - fieldName: CH2CO
              field: 2.00544314596E-07
            - fieldName: C3H8
              field: 2.51803728765E-02
    - !ablate::finiteVolume::fieldFunctions::DensityMassFractions
      region:
        name: slabBurnerBoundaryCells
      state: *fuelFieldState


solvers:
  - !ablate::finiteVolume::CompressibleFlowSolver
    id: flowField
    region:
      name: interiorFlowRegion
    parameters:
      cfl: 0.5
    eos: *eos
    transport: !ablate::eos::transport::Sutherland
      &transportModel
      eos: *eos
    additionalProcesses:
      - !ablate::finiteVolume::processes::PressureGradientScaling
        &pgs
        eos: *eos
        alphaInit: 25.0
        maxAlphaAllowed: 100.0
        domainLength: 0.165354
        log: !ablate::monitors::logs::StdOut
      - !ablate::finiteVolume::processes::TChemReactions
        eos: *eos
    fluxCalculator: !ablate::finiteVolume::fluxCalculator::AusmpUp
      pgs: *pgs
    monitors:
      - !ablate::monitors::TimeStepMonitor
        interval: 2
      - !ablate::monitors::PhysicsTimeStep
        interval: 2
  - !ablate::boundarySolver::BoundarySolver
    id: inlet
    region:
      name: boundaryCellsLeft
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::Inlet
        eos: *eos
        pgs: *pgs
        velocity: "min(15, t*15/.025) , 0.0"
  - !ablate::boundarySolver::BoundarySolver
    id: outlet
    region:
      name: boundaryCellsRight
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::OpenBoundary
        eos: *eos
        referencePressure: 101325.0
        maxAcousticsLength: 0.165354
        reflectFactor: .15
        pgs: *pgs
  - !ablate::boundarySolver::BoundarySolver
    id: walls
    region:
      name: boundaryWalls
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::IsothermalWall
        eos: *eos
        pgs: *pgs
  - !ablate::boundarySolver::BoundarySolver
    id: slab boundary
    region:
      name: slabBurnerBoundaryCells
    fieldBoundary:
      name: slabBurnerBoundaryFaces
    processes:
      - !ablate::boundarySolver::physics::Sublimation
        latentHeatOfFusion: 941000.000
        transportModel: *transportModel
        pgs: *pgs
        eos: *eos
        additionalHeatFlux: !ablate::mathFunctions::geom::Sphere
          center: [.036,  0.01, 0.01]
          radius: 0.005
          insideValues: "t < .06? 250000 : 0.0 "# 150 KW/m2
        massFractions: *fuelMassFrac